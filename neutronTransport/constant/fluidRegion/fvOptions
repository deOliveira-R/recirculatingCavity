/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

momentumSource
{
    type        vectorCodedSource;

    active      true;

    name        trigonometricSource;

    vectorCodedSourceCoeffs
    {
        selectionMode   all;
        
        fields          (U);

        codeInclude
        #{
            #include "solutionDomainSpecifications.H"
        #};

        codeOptions
        #{
            -I$(FOAM_CASE)/system
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
            vectorField& Usource = eqn.source();

            const scalarField& V = mesh_.V();
            const volVectorField& cellCentres = mesh_.C();
            
            const volScalarField& mu = mesh_.lookupObject<volScalarField>("thermo:mu");
            const scalarField muCells(mu, cells_);
            const volScalarField& rho_ = mesh_.lookupObject<volScalarField>("thermo:rho");
            
            scalar x = 0;
            scalar y = 0;

            vectorField force(cells_.size(), vector(0, 0, 0));
            
            forAll(cellCentres, cellI)
            {
                x = cellCentres[cellI].x();
                y = cellCentres[cellI].y();
                force[cellI] = vector(sin(x)*(rho_[cellI]*cos(x) + 2*mu[cellI]*cos(y)),
                                      sin(y)*(rho_[cellI]*cos(y) - 2*mu[cellI]*cos(x)),
                                      0);
            }

            Usource -= force*V;
        #};

        codeSetValue
        #{
            Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    trigonometricSourceCoeffs
    {
        $vectorCodedSourceCoeffs;
    }
}


// ************************************************************************* //
