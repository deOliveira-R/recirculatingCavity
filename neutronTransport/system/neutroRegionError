/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Web:      www.OpenFOAM.org
     \\/     M anipulation  |
-------------------------------------------------------------------------------
Description
    Calculates the relative error between the numerical and analytical
    solution for the problem and writes the field to the last time step.

\*---------------------------------------------------------------------------*/

// Load the library containing the 'coded' functionObject
libs            ("libutilityFunctionObjects.so");

region neutroRegion;

type coded;

// Name of on-the-fly generated functionObject
name neutroRegionError;

codeEnd
#{
    // Lookup flux0
    Info<< "Looking up field flux0\n" << endl;
    const volScalarField& flux0 = mesh().lookupObject<volScalarField>("flux0");
    
    Info<< "Extracting mesh centres\n" << endl;
    const volVectorField& centres = flux0.mesh().C();

    volScalarField fluxA
    (
        IOobject
        (
            "fluxA",
            mesh().time().timeName(),
            flux0.mesh(),
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        ),
        flux0
    );

    Info<< "\nEvaluating analytical solution at centres" << endl;

    //scalar fluxZero = 1e5;

    scalar x = 0;
    scalar y = 0;

    forAll(fluxA, i)
    {
        x = centres[i].x();
        y = centres[i].y();
        fluxA[i] = sin(x)*sin(y);
    }

    // Force writing of fluxA (since time has not changed)
    fluxA.write();

    Info<< "\nEvaluating relative error" << endl;

    volScalarField fluxError("fluxError", (flux0 - fluxA)/fluxA);

    Info<<"Writing relative error in flux to " << fluxError.objectPath() << endl;

    fluxError.write();
#};
