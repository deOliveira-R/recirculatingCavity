/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default none;
    ddt(porousMediumModel<porosity,p_rgh)     Euler;
    ddt(porousMediumModel<porosity,rho)       Euler;
    ddt(rho,U)              Euler;
    ddt((rho*porousMediumModel<porosity),K)   steadyState;
    ddt((rho*porousMediumModel<porosity),h)   steadyState;
    //ddt((rho*porosity),K)  Euler;
    //ddt((rho*porosity),h)  Euler;
    ddt(porousMediumModel<externalRhoCp,TStructures)  Euler;

}

gradSchemes
{
    // <optional limiter> Gauss <interpolation scheme>
    default Gauss linear;
    grad(U)             Gauss linear;
    grad(p_rgh)         Gauss linear;
    grad((rho*rhok))    Gauss linear;
    grad(h)             Gauss linear;
}

divSchemes
{
    // Gauss <interpolation scheme>
    default none;
    div(phi,U)          Gauss linearUpwind grad(U);
    div(phi,K)          Gauss linearUpwind default;
    div(phi,h)          Gauss linearUpwind grad(h);
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    // Gauss <interpolation scheme> <snGradScheme>
    default none;
    laplacian(muEff,U)              Gauss linear default;
    laplacian(rhorAUf,p_rgh)        Gauss linear orthogonal;
    laplacian(alphaEff,h)           Gauss linear default;
    laplacian(DkEff,k)              Gauss linear default;
    laplacian(DepsilonEff,epsilon)  Gauss linear default;
    laplacian(DREff,R)              Gauss linear default;
    laplacian((rho*nuEff),U)        Gauss linear orthogonal;
    laplacian(thermo:alpha,h)       Gauss linear orthogonal;
    laplacian(alphahe,h)            Gauss linear orthogonal;
}

interpolationSchemes
{
    default none;
    interpolate(porousMediumModel<porosity)                  linear;
    interpolate(((porousMediumModel<porosity*rho)*rAU)) linear;
    dotInterpolate(S,(rho_0*U_0))       linear;
    interpolate((rho*HbyA))             linear;
    flux((rho*HbyA))                    linear;
    interpolate(rho_0)                  linear;
}

snGradSchemes
{
    default orthogonal;
    //snGrad(p_rgh)       orthogonal;
    //snGrad((rho*rhok))  orthogonal;
}

fluxRequired
{
    default false;
    p_rgh;
}


// ************************************************************************* //
