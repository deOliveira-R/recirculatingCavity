/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0/fluidRegion";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [ 0 1 -1 0 0 0 0 ];

internalField   uniform ( 0 0 0 );

boundaryField
{
    topWall
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                // Standard lines to get access to the mesh data
                // Get access to the boundary
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db()); // Access mesh database
                const label id = mesh.boundary().findPatchID("topWall"); // Get label ID (integer) of the "topWall" patch
                const fvPatch& patch = mesh.boundary()[id]; // Access boundary mesh

                vectorField U(patch.size(), vector(0, 0, 0)); // Initialize vector field of correct size for boundary

                forAll(U, i)
                {
                    const scalar x = patch.Cf()[i][0]; // get x coordinate by accessing patch.Cf()[i][component] where x=0, y=1 and z=2
                    U[i] = vector(-cos(x), 0., 0.);
                }
                U.writeEntry("", os);
            #};
        };
    }
    bottomWall
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                // Standard lines to get access to the mesh data
                // Get access to the boundary
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db()); // Access mesh database
                const label id = mesh.boundary().findPatchID("bottomWall"); // Get label ID (integer) of the "topWall" patch
                const fvPatch& patch = mesh.boundary()[id]; // Access boundary mesh

                vectorField U(patch.size(), vector(0, 0, 0)); // Initialize vector field of correct size for boundary

                forAll(U, i)
                {
                    const scalar x = patch.Cf()[i][0]; // get x coordinate by accessing patch.Cf()[i][component] where x=0, y=1 and z=2
                    U[i] = vector(cos(x), 0., 0.);
                }
                U.writeEntry("", os);
            #};
        };
    }
    leftWall
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                // Standard lines to get access to the mesh data
                // Get access to the boundary
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db()); // Access mesh database
                const label id = mesh.boundary().findPatchID("leftWall"); // Get label ID (integer) of the "topWall" patch
                const fvPatch& patch = mesh.boundary()[id]; // Access boundary mesh

                vectorField U(patch.size(), vector(0, 0, 0)); // Initialize vector field of correct size for boundary

                forAll(U, i)
                {
                    const scalar y = patch.Cf()[i][1]; // get y coordinate by accessing patch.Cf()[i][component] where x=0, y=1 and z=2
                    U[i] = vector(0., -sin(y), 0.);
                }
                U.writeEntry("", os);
            #};
        };
    }
    rightWall
    {
        type            fixedValue;
        value           #codeStream
        {
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};

            codeLibs
            #{
                -lmeshTools \
                -lfiniteVolume
            #};

            code
            #{
                // Standard lines to get access to the mesh data
                // Get access to the boundary
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );

                const fvMesh& mesh = refCast<const fvMesh>(d.db()); // Access mesh database
                const label id = mesh.boundary().findPatchID("rightWall"); // Get label ID (integer) of the "topWall" patch
                const fvPatch& patch = mesh.boundary()[id]; // Access boundary mesh

                vectorField U(patch.size(), vector(0, 0, 0)); // Initialize vector field of correct size for boundary

                forAll(U, i)
                {
                    const scalar y = patch.Cf()[i][1]; // get y coordinate by accessing patch.Cf()[i][component] where x=0, y=1 and z=2
                    U[i] = vector(0., sin(y), 0.);
                }
                U.writeEntry("", os);
            #};
        };
    }
    frontAndBack
    {
        type            empty;
    }
}
