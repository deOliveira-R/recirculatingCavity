/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default none;
    grad(U)             Gauss linear;
    grad(p_rgh)         Gauss linear;
    grad((rho*rhok))    Gauss linear;
    grad(h)             Gauss linear;
}

divSchemes
{
    default none;
    div(phi,U)          Gauss linearUpwind grad(U);
    div(phi,K)          Gauss upwind;
    div(phi,h)          Gauss upwind;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default none;
    laplacian(muEff,U)      Gauss linear limited corrected 0.333;
    laplacian(Dp,p_rgh)     Gauss linear limited corrected 0.333;
    laplacian(alphaEff,h)   Gauss linear limited corrected 0.333;
    laplacian(DkEff,k)      Gauss linear limited corrected 0.333;
    laplacian(DepsilonEff,epsilon)  Gauss linear limited corrected 0.333;
    laplacian(DREff,R)      Gauss linear limited corrected 0.333;
    laplacian((rho*nuEff),U)        Gauss linear limited corrected 0.333;
    laplacian(thermo:alpha,h)       Gauss linear limited corrected 0.333;
}

interpolationSchemes
{
    default none;
    interpolate(gamma)                  linear;
    interpolate(((gamma*rho)*(1|A(U)))) linear;
    dotInterpolate(S,(rho_0*U_0))       linear;
    interpolate((rho*HbyA))             linear;
    flux((rho*HbyA))                    linear;
}

snGradSchemes
{
    default none;
    snGrad(p_rgh)       limited corrected 0.333;
    snGrad((rho*rhok))  limited corrected 0.333;
}

fluxRequired
{
    default         no;
    p_rgh;
}


// ************************************************************************* //
